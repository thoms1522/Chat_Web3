{
  "table_summary": {
    "ethereum.core.dim_contract_abis": "This table contains the contract ABIs that we have sourced from Etherscan, the community, or bytecode matched. This table is the source of ABIs used in the core__ez_decoded_event_logs and core__fact_decoded_event_logs tables. We first try to source ABIs from Etherscan. If we cannot find an ABI on Etherscan, we will rely on user submissions. To add a contract to this table, please visit here. If we are unable to locate an ABI for a contract from Etherscan or the community, we will try to find an ABI to use by matching the contract bytecode to a known contract bytecode we do have an ABI for.",
    "ethereum.core.dim_contracts": "This table contains all the contracts that are deployed on the Ethereum blockchain along with their on-chain metadata.",
    "ethereum.core.dim_dates": "This table contains the date and their respective information such as day of month, week, year, and week of year etc.",
    "ethereum.core.dim_event_signatures": "This table contains event signatures used to decode Ethereum event data into a human-readable format.",
    "ethereum.core.dim_function_signatures": "This table contains function signatures used to decode Ethereum call data into a human-readable format.",
    "ethereum.core.dim_labels": "This table contains labels for addresses on the Ethereum Blockchain.",
    "ethereum.core.ez_balance_deltas": "This table contains the block level balance changes for both tokens (including ERC721s) and Native ETH on the Ethereum Blockchain for all wallets and contracts. If a token or Native ETH is moved, we will read the balance of the involved wallets at that block, and carry forward the previous balance into the current record. Symbol, name, and price are joined where possible. ERC721s are included. Data is currently read at the max daily block for wallets with activity. We plan to increase the granularity on this table to block level changes in the near term. Please note - the underlying data for this is large. If you want your query to run quickly, please use filters as much as possible. Using at least block_timestamp::date as a filter will lead to optimal query performance. Other filters will help query runtime.",
    "ethereum.core.ez_current_balances": "This table contains the current, non 0, balances for wallets on the Ethereum Blockchain. Symbol, name, and price are joined where possible. Prices are calculated as of the last activity date and as of the most recently recorded hourly price. ERC721s are included. Please note - the underlying data for this is large. If you want your query to run quickly, please use filters as much as possible. Using at least last_activity_block_timestamp::date as a filter will lead to optimal query performance.",
    "ethereum.core.ez_decoded_event_logs": "This model contains decoded event logs for contracts that we have an ABI for. Please note, this table does not include all event logs, only those that we have an ABI for. The decoded_log column is the easiest place to query decoded data. It is a JSON object, where the keys are the names of the event parameters, and the values are the values of the event parameters. You can select from this column using the following sample format, decoded_log:from::string or more generally, decoded_log:<event_param>::datatype. See below for a full sample query. The full_decoded_logs column contains the same information, as well as additional fields such as the datatype of the decoded data. You may need to laterally flatten this column to query the data. Sample query for USDC Transfer events: sql select tx_hash, block_number, contract_address, decoded_log:from::string as from_address, decoded_log:to::string as to_address, decoded_log:value::integer as value from ethereum.core.fact_decoded_event_logs where contract_address = lower('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') and block_number between 16400000 and 16405000 and event_name = 'Transfer' limit 50'",
    "ethereum.core.ez_eth_transfers": "This table contains all native ETH transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the fact_transactions table. The identifier and tx_hash columns relate this table back to fact_traces, which contains more details on the transfers.",
    "ethereum.core.ez_token_transfers": "This table will contain all events in the fact_token_transfers table, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here.",
    "ethereum.core.fact_blocks": "This table contains block level data for the Ethereum Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time.",
    "ethereum.core.fact_contract_reads": "This table contains contract reads for a variety of functions and contracts on the Ethereum Blockchain.",
    "ethereum.core.fact_decoded_event_logs": "This model contains decoded event logs for contracts that we have an ABI for. Please note, this table does not include all event logs, only those that we have an ABI for. This table will perform better than the core__ez_decoded_event_logs table, but does not include as many columns. The decoded_log column is the easiest place to query decoded data. It is a JSON object, where the keys are the names of the event parameters, and the values are the values of the event parameters. You can select from this column using the following sample format, decoded_log:from::string or more generally, decoded_log:<event_param>::datatype. See below for a full sample query. The full_decoded_logs column contains the same information, as well as additional fields such as the datatype of the decoded data. You may need to laterally flatten this column to query the data. Sample query for USDC Transfer events: sql select tx_hash, block_number, contract_address, decoded_log:from::string as from_address, decoded_log:to::string as to_address, decoded_log:value::integer as value from ethereum.core.fact_decoded_event_logs where contract_address = lower('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') and block_number between 16400000 and 16405000 and event_name = 'Transfer' limit 50'",
    "ethereum.core.fact_eth_balances": "This table contains the unadjusted Ether (ETH) balances for users on the Ethereum blockchain.  When an ETH transfer occurs, we will read the balance of the involved parties at the transfer block.",
    "ethereum.core.fact_event_logs": "This table contains flattened event logs from transactions on the Ethereum Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Please see fact_decoded_event_logs or ez_decoded_event_logs for the decoded event logs.",
    "ethereum.core.fact_token_balances": "This table contains the unadjusted token balances for users on the Ethereum blockchain.  When a token transfer event occurs, we will read the balance of the involved parties at the transfer block. Please see `ethereum.core.dim_contracts` for decimal adjustments. Includes both ERC20s and ERC721s.",
    "ethereum.core.fact_token_transfers": "This table contains events on the Ethereum Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in dim_contracts. This table will not contain transfers of native ETH.",
    "ethereum.core.fact_traces": "This table contains flattened trace data for internal contract calls on the Ethereum blockchain. Hex encoded fields can be decoded to integers by using TO_NUMBER(<FIELD>, 'XXXXXXXXXXXX'), with the number of Xs being the max length of the encoded field. You must also remove the 0x from your field to use the TO_NUMBER() function, if applicable.",
    "ethereum.core.fact_transactions": "This table contains transaction level data for the Ethereum Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and an ETH value transferred when applicable. Transactions may be native ETH transfers or interactions with contract addresses.",
    "ethereum.defi.dim_dex_liquidity_pools": "This table contains details on decentralized exchange (DEX) liquidity pools (LP) on the Ethereum blockchain, including the tokens, symbols and decimals within each pool alongside the following protocols: BALANCER, CURVE, DODO, FRAXSWAP, KYBERSWAP, MAVERICK, PANCAKESWAP, SHIBASWAP, SUSHISWAP, UNISWAP, TRADER JOE, VERSE.",
    "ethereum.defi.ez_bridge_activity": "A convenience table that aggregates bridge activity from event_logs, traces and transfers, including bridge deposits and transfers sent from the following protocols: ACROSS, ALLBRIDGE, AXELAR, CELER, CBRIDGE, HOP, MESON, MULTICHAIN, NATIVE, STARGATE, SYMBIOSIS, SYNAPSE, WORMHOLE along with other helpful columns, including an amount USD where available. Note, this table only includes records for the protocols listed above with live, onchain bridge activity and may not represent the complete bridging picture.",
    "ethereum.defi.ez_dex_swaps": "This table currently contains swap events from the fact_event_logs table for SUSHI, UNISWAP, CURVE, SYNTHETIX, BALANCER, DODO, FRAX, HASHFLOW, KYBERSWAP, MAVERICK, PANCAKESWAP, SHIBASWAP, TRADER JOE, AND VERSE along with other helpful columns including an amount USD where possible. Other dexes coming soon! Note: A rule has been put in place to null out the amount_USD if that number is too divergent between amount_in_USD and amount_out_usd. This can happen for swaps of less liquid tokens during very high fluctuation of price.",
    "ethereum.defi.ez_liquid_staking_deposits": "This table currently contains liquid staking derivative deposit/stake/mint events from the fact_event_logs table with the following protocols - ANKR, BINANCE, COINBASE, CREAM, FRAX, GUARDED, HORD, LIDO, NODEDAO, ROCKETPOOL, SHAREDSTAKE, STADER, STAFI, STAKEHOUND, STAKEWISE, SWELL, UNIETH - along with other helpful columns, including an amount USD where available. Note, this table only includes deposit/stake/mint events for protocols with live, onchain liquid staking derivative token event logs, does not directly include staking from node operators, and may not represent the complete staking picture in accordance to the Ethereum Beacon Chain.",
    "ethereum.defi.ez_liquid_staking_withdrawals": "This table currently contains liquid staking derivative withdraw/unstake/redeem/burn events from the fact_event_logs table with the following protocols - ANKR, COINBASE, CREAM, FRAX, LIDO, NODEDAO, ROCKETPOOL, SHAREDSTAKE, STADER, STAFI, UNIETH - along with other helpful columns, including an amount USD where available. Note, this table only includes withdraw/unstake/redeem/burn events for protocols with live, onchain liquid staking derivative token event logs, does not directly include staking from node operators, and may not represent the complete staking picture in accordance to the Ethereum Beacon Chain.",
    "ethereum.defi.ez_lending_borrows": "This table contains transactions where users borrowed assets across Aave, Compound, Spark, and Fraxlend protocols. In order to borrow assets, a user must first deposit their preferred asset and amount as collateral. Specific to Aave and Spark, borrowers can choose either a stable or variable borrow rate. For more information, see column descriptions.",
    "ethereum.defi.ez_lending_deposits": "This table contains deposit transactions across Aave, Compound, Spark, and Fraxlend protocols. A user deposits their preferred asset and amount. After depositing, users earn passive income based on the market borrowing demand. Additionally, depositing allows users to borrow by using their deposited assets as a collateral. Any interest earned by depositing funds helps offset the interest rate accumulated by borrowing.",
    "ethereum.defi.ez_lending_flashloans": "This table contains flash loan transactions across Aave and Spark protocols where a borrower executes an undercollateralised, one-block liquidity loan. Flash loans are a feature designed for developers, due to the technical knowledge required to execute one. Flash Loans allow you to borrow any available amount of assets without providing any collateral, as long as the liquidity is returned to the protocol within one block transaction.",
    "ethereum.defi.ez_lending_liquidations": "This table contains transactions in which a borrower's collateral asset is liquidated across Aave, Compound, Spark, and Fraxlend protocols. Liquidations occur when a borrower's health factor goes below 1 due to their collateral value not properly covering their loan/debt value. This might happen when the collateral decreases in value or the borrowed debt increases in value against each other. This collateral vs loan value ratio is shown in the health factor. In a liquidation, up to 50% of a borrower's debt is repaid and that value + liquidation fee is taken from the collateral available, so after a liquidation the amount liquidated from one's debt is repaid.",
    "ethereum.defi.ez_lending_repayments": "This table contains transactions in which a borrower repays their loan (debt) across the Aave, Compound, Spark, and Fraxlend protocols. Loans are repaid in the same asset borrowed, plus accrued interest. Borrowers can pay back their loan based on the USD price as they can borrow any of the available stable coins (USDC, DAI, USDT, etc.).",
    "ethereum.defi.ez_lending_withdraws": "This table contains transactions in which a user withdraws liquidity across the Aave, Compound, Spark, and Fraxlend protocols. Users need to make sure there is enough liquidity (not borrowed) in order to withdraw, if this is not the case, users need to wait for more liquidity from depositors or borrowers repaying.",
    "ethereum.nft.dim_nft_collection_metadata": "This table contains the metadata for popular NFT collections on the Ethereum blockchain.",
    "ethereum.nft.dim_nft_metadata": "This table is obsoleted, please use dim_nft_collection_metadata instead!",
    "ethereum.nft.ez_nft_mints": "This table contains NFT mint events, defined as an NFT transfers from a burn address to an address, on the Ethereum blockchain.",
    "ethereum.nft.ez_nft_sales": "This table contains NFT sales from Blur, Opensea(Seaport), Looksrare, Rarible, x2y2, Sudoswap, NFTx and Larvalabs(Cryptopunks)",
    "ethereum.nft.ez_nft_transfers": "This table contains NFT transfer events on the Ethereum blockchain.",
    "ethereum.price.dim_asset_metadata": "A comprehensive dimensional table holding all provider asset metadata and other relevant details pertaining to each token_address.",
    "ethereum.price.ez_asset_metadata": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address.",
    "ethereum.price.ez_hourly_token_prices": "A convenience table for determining token prices by address.",
    "ethereum.price.fact_hourly_token_prices": "A comprehensive fact table holding provider specific hourly token prices."      
  }
}